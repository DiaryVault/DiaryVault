"""
Django settings for core project.

Generated by 'django-admin startproject' using Django 5.1.8.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path
import os
from dotenv import load_dotenv

load_dotenv()  # load environment variables from .env file

GROK_API_KEY = os.environ.get('GROK_API_KEY')

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-39q6gly-+d3b!h9h0%#m0zldysqtpv#vkap0byuq6&=w@s*73*'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['localhost', '127.0.0.1', 'diaryvault.com', 'www.diaryvault.com', '52.64.254.25']


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'diary',
    'widget_tweaks',
    'django.contrib.sites',

    # Third party apps
    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    'allauth.socialaccount.providers.google',
    'allauth.socialaccount.providers.apple',
    'allauth.socialaccount.providers.microsoft',

]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'diary.middleware.RateLimitMiddleware',
    'diary.middleware.PendingEntryMiddleware',
    'allauth.account.middleware.AccountMiddleware',
]

ROOT_URLCONF = 'core.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'django.template.context_processors.request',
            ],
        },
    },
]

WSGI_APPLICATION = 'core.wsgi.application'

SITE_ID = 1

AUTHENTICATION_BACKENDS = [
    'django.contrib.auth.backends.ModelBackend',
    'allauth.account.auth_backends.AuthenticationBackend',
]

# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = 'static/'
STATICFILES_DIRS = [
    BASE_DIR / "static",
]

STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')



# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

LOGIN_URL = '/login/'
LOGIN_REDIRECT_URL = '/'
LOGOUT_REDIRECT_URL = '/login/'

ACCOUNT_EMAIL_REQUIRED = True
ACCOUNT_USERNAME_REQUIRED = True
ACCOUNT_AUTHENTICATION_METHOD = 'username_email'


CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',
    }
}

MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

# Stripe Configuration

load_dotenv()  # Load variables from .env

STRIPE_PUBLISHABLE_KEY = os.getenv('STRIPE_PUBLISHABLE_KEY')
STRIPE_SECRET_KEY = os.getenv('STRIPE_SECRET_KEY')

# Marketplace Settings
MARKETPLACE_SETTINGS = {
    'PLATFORM_FEE_PERCENT': 10,  # 10% platform fee
    'TIP_FEE_PERCENT': 5,        # 5% fee on tips
    'MINIMUM_PAYOUT': 50.00,     # Minimum earnings before payout
    'PAYOUT_SCHEDULE': 'monthly', # monthly, weekly, daily
}

# Celery for background tasks (optional)
CELERY_BROKER_URL = 'redis://localhost:6379'
CELERY_RESULT_BACKEND = 'redis://localhost:6379'

# Enhanced Marketplace Features (2025)
MARKETPLACE_ENHANCED = {
    'DYNAMIC_PRICING_ENABLED': True,
    'ANALYTICS_PACKAGES_ENABLED': True,
    'PREMIUM_PLACEMENTS_ENABLED': True,
    'SUBSCRIPTION_TIERS_ENABLED': True,

    # Analytics package pricing
    'ANALYTICS_PRICING': {
        'basic_insights': 9.99,
        'advanced_analytics': 19.99,
        'market_intelligence': 39.99
    },

    # Revenue sharing based on subscription tier
    'REVENUE_SHARING': {
        'standard': 0.85,        # 85% to author
        'author_starter': 0.90,  # 90% to author
        'author_professional': 0.95,  # 95% to author
    }
}

# Celery periodic tasks for automation
from celery.schedules import crontab

CELERY_BEAT_SCHEDULE = {
    'update-dynamic-pricing': {
        'task': 'diary.tasks.update_dynamic_pricing',
        'schedule': crontab(hour=2, minute=0),  # Daily at 2 AM
    },
    'process-monthly-payouts': {
        'task': 'diary.tasks.process_monthly_payouts',
        'schedule': crontab(day_of_month=1, hour=3, minute=0),  # 1st of month
    },
    'generate-marketplace-insights': {
        'task': 'diary.tasks.generate_marketplace_insights',
        'schedule': crontab(hour=1, minute=0, day_of_week=1),  # Weekly Monday
    },
}

