"""
Django settings for core project.

Generated by 'django-admin startproject' using Django 5.1.8.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path
import os
from dotenv import load_dotenv

# Load environment variables from .env file
load_dotenv()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv('SECRET_KEY', 'django-insecure-fallback-key')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['localhost', '127.0.0.1', 'diaryvault.com', 'www.diaryvault.com', '52.64.254.25']

# API Keys
GROK_API_KEY = os.getenv('GROK_API_KEY')

# Application definition
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'diary',
    'web3auth',  # Your Web3 authentication app
    'widget_tweaks',
    'django.contrib.sites',

    # Third party apps
    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    'allauth.socialaccount.providers.google',
    'allauth.socialaccount.providers.apple',
    'allauth.socialaccount.providers.microsoft',
    
    # Web3 & API support
    'corsheaders',  # For Web3 API CORS
    'rest_framework',  # For Web3 API
    'rest_framework.authtoken',  # For Web3 token auth
]

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',  # Must be at the top
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    # 'diary.middleware.RateLimitMiddleware',  # Your existing rate limiting (commented out)
    'diary.middleware.PendingEntryMiddleware',  # Your existing middleware
    'diary.views.wallet_auth.WalletAuthenticationMiddleware',  # Web3 wallet auth middleware
    'allauth.account.middleware.AccountMiddleware',
]

ROOT_URLCONF = 'core.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],
        'APP_DIRS': False,  # Must be False when using custom loaders
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'django.template.context_processors.request',
            ],
            'loaders': [
                ('django.template.loaders.cached.Loader', [
                    'django.template.loaders.filesystem.Loader',
                    'django.template.loaders.app_directories.Loader',
                ]),
            ] if not DEBUG else [
                'django.template.loaders.filesystem.Loader',
                'django.template.loaders.app_directories.Loader',
            ],
        },
    },
]

WSGI_APPLICATION = 'core.wsgi.application'

SITE_ID = 1

AUTHENTICATION_BACKENDS = [
    'django.contrib.auth.backends.ModelBackend',
    'allauth.account.auth_backends.AuthenticationBackend',
    'diary.views.web3_auth.Web3AuthenticationBackend',  # Web3 auth backend
]

# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}

# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators
AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/
LANGUAGE_CODE = 'en-us'
TIME_ZONE = 'UTC'
USE_I18N = True
USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/
STATIC_URL = '/static/'
STATICFILES_DIRS = [
    BASE_DIR / "static",
]
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')

# Static files finders (for Web3 JS files)
STATICFILES_FINDERS = [
    'django.contrib.staticfiles.finders.FileSystemFinder',
    'django.contrib.staticfiles.finders.AppDirectoriesFinder',
]

# Media Files
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

# File Upload Configuration
FILE_UPLOAD_MAX_MEMORY_SIZE = 5 * 1024 * 1024  # 5MB
DATA_UPLOAD_MAX_MEMORY_SIZE = 5 * 1024 * 1024  # 5MB

# Custom adapters for auto-username generation
ACCOUNT_ADAPTER = 'diary.adapters.CustomAccountAdapter'
SOCIALACCOUNT_ADAPTER = 'diary.adapters.CustomSocialAccountAdapter'

SOCIALACCOUNT_FORMS = {}

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# ===========================================
# ðŸš€ WEB3 AUTHENTICATION CONFIGURATION
# ===========================================

# Web3 Configuration
WEB3_SETTINGS = {
    'RPC_URL': 'https://mainnet.base.org',  # Base network
    'CHAIN_ID': 8453,  # Base mainnet
    'SUPPORTED_CHAINS': [1, 8453],  # Ethereum mainnet, Base
    'MESSAGE_TEMPLATE': 'Welcome to DiaryVault!\n\nSign this message to authenticate:\n{nonce}\n\nTimestamp: {timestamp}',
    'NONCE_EXPIRY': 300,  # 5 minutes
}

# Web3 Nonce expiry (for backward compatibility)
WEB3_NONCE_EXPIRY = 300  # 5 minutes

# CORS settings for Web3 frontend
CORS_ALLOWED_ORIGINS = [
    "http://localhost:3000",
    "http://127.0.0.1:3000",
    "http://localhost:8000",
    "http://127.0.0.1:8000",
    "https://diaryvault.com",
    "https://www.diaryvault.com",
]

CORS_ALLOW_CREDENTIALS = True

# Allow CORS for Web3 API endpoints
CORS_URLS_REGEX = r'^/api/web3/.*$'

# REST Framework for Web3 API
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework.authentication.TokenAuthentication',
        'rest_framework.authentication.SessionAuthentication',
    ],
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated',
    ],
    'DEFAULT_RENDERER_CLASSES': [
        'rest_framework.renderers.JSONRenderer',
    ],
    'DEFAULT_PARSER_CLASSES': [
        'rest_framework.parsers.JSONParser',
    ],
}

# ===========================================
# SESSION CONFIGURATION FOR ANONYMOUS USERS
# ===========================================

# Session settings
SESSION_ENGINE = 'django.contrib.sessions.backends.db'  # Use database-backed sessions
SESSION_COOKIE_AGE = 86400 * 7  # 7 days - allows anonymous users to come back
SESSION_SAVE_EVERY_REQUEST = True  # Save session on every request to keep it alive
SESSION_COOKIE_HTTPONLY = True
SESSION_COOKIE_SECURE = False  # Set to True in production with HTTPS
SESSION_COOKIE_SAMESITE = 'Lax'
SESSION_COOKIE_NAME = 'diaryvault_sessionid'

# Anonymous user session limits
ANONYMOUS_SESSION_MAX_ENTRIES = 10  # Maximum entries an anonymous user can create
ANONYMOUS_SESSION_EXPIRY = 86400 * 7  # 7 days

# ===========================================
# END WEB3 & SESSION CONFIGURATION
# ===========================================

# Django-allauth settings for email-only signup (username auto-generated)
ACCOUNT_AUTHENTICATION_METHOD = 'email'  # Use email for login (cleaner UX)
ACCOUNT_EMAIL_REQUIRED = True
ACCOUNT_USERNAME_REQUIRED = False  # Don't require username during signup - auto-generate it
ACCOUNT_EMAIL_VERIFICATION = 'optional'  # No email verification required
ACCOUNT_LOGIN_ON_EMAIL_CONFIRMATION = True
ACCOUNT_LOGIN_ON_PASSWORD_RESET = True
ACCOUNT_LOGOUT_ON_GET = False  # Require POST for logout (security)
ACCOUNT_SESSION_REMEMBER = True  # Remember login sessions

# Redirect settings
ACCOUNT_LOGIN_REDIRECT_URL = '/dashboard/'
ACCOUNT_LOGOUT_REDIRECT_URL = '/login/'
ACCOUNT_SIGNUP_REDIRECT_URL = '/dashboard/'
LOGIN_REDIRECT_URL = '/dashboard/'
LOGIN_URL = '/login/'
LOGOUT_URL = '/logout/'

# Additional allauth settings
ACCOUNT_EMAIL_CONFIRMATION_EXPIRE_DAYS = 1
ACCOUNT_UNIQUE_EMAIL = True  # Allow duplicate emails if needed
ACCOUNT_PREVENT_ENUMERATION = False  # Don't block based on existing emails

# Social account settings (separate from regular signup)
SOCIALACCOUNT_AUTO_SIGNUP = True  # Skip signup form for social accounts
SOCIALACCOUNT_SIGNUP_FORM_CLASS = None  # No additional signup form for social
SOCIALACCOUNT_EMAIL_VERIFICATION = 'none'  # Don't require email verification for social
SOCIALACCOUNT_EMAIL_REQUIRED = False  # Don't require email in social signup (will use provider email)
SOCIALACCOUNT_QUERY_EMAIL = True  # Always fetch email from provider
SOCIALACCOUNT_LOGIN_ON_GET = True  # Allow social login via GET
SOCIALACCOUNT_STORE_TOKENS = False

# Enhanced SOCIALACCOUNT_PROVIDERS with better configuration
SOCIALACCOUNT_PROVIDERS = {
    'google': {
        'SCOPE': [
            'profile',
            'email',
        ],
        'AUTH_PARAMS': {
            'access_type': 'online',
        },
        'OAUTH_PKCE_ENABLED': True,
        'VERIFIED_EMAIL': True,
    },
    'apple': {
        # Apple configuration (when you get credentials)
        'certificate_key': '''-----BEGIN PRIVATE KEY-----
        # Your Apple certificate key will go here
        -----END PRIVATE KEY-----''',
        'VERIFIED_EMAIL': True,
    }
}

# Enhanced Cache Configuration
CACHES = {
    'default': {
        'BACKEND': 'django_redis.cache.RedisCache',
        'LOCATION': os.environ.get('REDIS_URL', 'redis://localhost:6379/1'),
        'OPTIONS': {
            'CLIENT_CLASS': 'django_redis.client.DefaultClient',
        },
        'KEY_PREFIX': 'diary_cache',
        'TIMEOUT': 300,  # Default cache timeout (5 minutes)
    } if os.environ.get('REDIS_URL') else {
        'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',
        'LOCATION': 'unique-snowflake',
    },
    'sessions': {
        'BACKEND': 'django_redis.cache.RedisCache',
        'LOCATION': os.environ.get('REDIS_URL', 'redis://localhost:6379/2'),
        'OPTIONS': {
            'CLIENT_CLASS': 'django_redis.client.DefaultClient',
        },
        'KEY_PREFIX': 'diary_sessions',
    } if os.environ.get('REDIS_URL') else {
        'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',
        'LOCATION': 'sessions',
    }
}

# Use Redis for sessions if available
if os.environ.get('REDIS_URL'):
    SESSION_ENGINE = 'django.contrib.sessions.backends.cache'
    SESSION_CACHE_ALIAS = 'sessions'

# Cache key prefixes
CACHE_MIDDLEWARE_ALIAS = 'default'
CACHE_MIDDLEWARE_SECONDS = 600
CACHE_MIDDLEWARE_KEY_PREFIX = 'diary'

# Stripe Configuration
STRIPE_PUBLISHABLE_KEY = os.getenv('STRIPE_PUBLISHABLE_KEY')
STRIPE_SECRET_KEY = os.getenv('STRIPE_SECRET_KEY')

# Marketplace Settings
MARKETPLACE_SETTINGS = {
    'PLATFORM_FEE_PERCENT': 10,  # 10% platform fee
    'TIP_FEE_PERCENT': 5,        # 5% fee on tips
    'MINIMUM_PAYOUT': 50.00,     # Minimum earnings before payout
    'PAYOUT_SCHEDULE': 'monthly', # monthly, weekly, daily
}

# Enhanced Marketplace Features (2025)
MARKETPLACE_ENHANCED = {
    'DYNAMIC_PRICING_ENABLED': True,
    'ANALYTICS_PACKAGES_ENABLED': True,
    'PREMIUM_PLACEMENTS_ENABLED': True,
    'SUBSCRIPTION_TIERS_ENABLED': True,

    # Analytics package pricing
    'ANALYTICS_PRICING': {
        'basic_insights': 9.99,
        'advanced_analytics': 19.99,
        'market_intelligence': 39.99
    },

    # Revenue sharing based on subscription tier
    'REVENUE_SHARING': {
        'standard': 0.85,        # 85% to author
        'author_starter': 0.90,  # 90% to author
        'author_professional': 0.95,  # 95% to author
    }
}

# AI Service Configuration
AI_RATE_LIMIT_PER_USER_DAILY = 50
AI_RATE_LIMIT_PER_IP_HOURLY = 100

# API Quotas
API_QUOTAS = {
    'ai_generation_daily': 50,
    'compilation_daily': 10,
    'publishing_daily': 5,
}

# Celery Configuration
CELERY_BROKER_URL = os.environ.get('REDIS_URL', 'redis://localhost:6379/0')
CELERY_RESULT_BACKEND = os.environ.get('REDIS_URL', 'redis://localhost:6379/0')

# Celery task configuration
CELERY_ACCEPT_CONTENT = ['json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'
CELERY_TIMEZONE = 'UTC'
CELERY_ENABLE_UTC = True

# Task routing
CELERY_TASK_ROUTES = {
    'diary.tasks.generate_insights_async': {'queue': 'ai_tasks'},
    'diary.tasks.generate_biography_async': {'queue': 'ai_tasks'},
    'diary.tasks.generate_entry_summary_async': {'queue': 'ai_tasks'},
    'diary.tasks.update_journal_analytics': {'queue': 'analytics'},
    'diary.tasks.cleanup_old_ai_logs': {'queue': 'maintenance'},
}

# Task time limits
CELERY_TASK_SOFT_TIME_LIMIT = 300  # 5 minutes
CELERY_TASK_TIME_LIMIT = 600       # 10 minutes

# Worker configuration
CELERY_WORKER_MAX_TASKS_PER_CHILD = 1000
CELERY_WORKER_DISABLE_RATE_LIMITS = False

# Result expiration
CELERY_RESULT_EXPIRES = 3600  # 1 hour

# Celery periodic tasks for automation
from celery.schedules import crontab

CELERY_BEAT_SCHEDULE = {
    # Your existing tasks
    'update-dynamic-pricing': {
        'task': 'diary.tasks.update_dynamic_pricing',
        'schedule': crontab(hour=2, minute=0),  # Daily at 2 AM
    },
    'process-monthly-payouts': {
        'task': 'diary.tasks.process_monthly_payouts',
        'schedule': crontab(day_of_month=1, hour=3, minute=0),  # 1st of month
    },
    'generate-marketplace-insights': {
        'task': 'diary.tasks.generate_marketplace_insights',
        'schedule': crontab(hour=1, minute=0, day_of_week=1),  # Weekly Monday
    },

    # Enhanced background tasks
    'update-journal-analytics': {
        'task': 'diary.tasks.update_journal_analytics',
        'schedule': crontab(minute=0, hour='*/6'),  # Every 6 hours
    },
    'cleanup-old-ai-logs': {
        'task': 'diary.tasks.cleanup_old_ai_logs',
        'schedule': crontab(minute=0, hour=2),  # Daily at 2 AM
    },
    'update-marketplace-stats': {
        'task': 'diary.tasks.update_marketplace_stats',
        'schedule': crontab(minute=0),  # Every hour
    },
    'generate-daily-insights': {
        'task': 'diary.tasks.generate_daily_insights_digest',
        'schedule': crontab(minute=30, hour=9),  # 9:30 AM daily
    },
    'cleanup-expired-caches': {
        'task': 'diary.tasks.cleanup_expired_caches',
        'schedule': crontab(minute=15, hour='*/4'),  # Every 4 hours
    },
    
    # WEB3 CLEANUP TASKS
    'cleanup-expired-nonces': {
        'task': 'web3auth.tasks.cleanup_expired_nonces',
        'schedule': crontab(minute='*/5'),  # Every 5 minutes
    },
    'cleanup-inactive-sessions': {
        'task': 'web3auth.tasks.cleanup_inactive_sessions',
        'schedule': crontab(hour=3, minute=0),  # Daily at 3 AM
    },
    
    # ANONYMOUS SESSION CLEANUP
    'cleanup-anonymous-sessions': {
        'task': 'diary.tasks.cleanup_anonymous_sessions',
        'schedule': crontab(hour=4, minute=0),  # Daily at 4 AM
    },
}

# Create logs directory if it doesn't exist
LOGS_DIR = os.path.join(BASE_DIR, 'logs')
if not os.path.exists(LOGS_DIR):
    os.makedirs(LOGS_DIR)

# Enhanced Logging Configuration
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {process:d} {thread:d} {message}',
            'style': '{',
        },
        'simple': {
            'format': '{levelname} {message}',
            'style': '{',
        },
    },
    'handlers': {
        'file': {
            'level': 'INFO',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': os.path.join(LOGS_DIR, 'diary.log'),
            'maxBytes': 1024*1024*15,  # 15MB
            'backupCount': 10,
            'formatter': 'verbose',
        },
        'celery_file': {
            'level': 'INFO',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': os.path.join(LOGS_DIR, 'celery.log'),
            'maxBytes': 1024*1024*15,  # 15MB
            'backupCount': 10,
            'formatter': 'verbose',
        },
        'web3_file': {  # WEB3 LOGGING
            'level': 'INFO',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': os.path.join(LOGS_DIR, 'web3.log'),
            'maxBytes': 1024*1024*15,  # 15MB
            'backupCount': 10,
            'formatter': 'verbose',
        },
        'console': {
            'level': 'INFO',
            'class': 'logging.StreamHandler',
            'formatter': 'simple',
        },
        # Keep your existing debug file handler
        'debug_file': {
            'level': 'DEBUG',
            'class': 'logging.FileHandler',
            'filename': '/home/ubuntu/DiaryVault/django_debug.log',
            'formatter': 'verbose',
        },
    },
    'loggers': {
        'diary': {
            'handlers': ['file', 'console'],
            'level': 'INFO',
            'propagate': True,
        },
        'web3auth': {  # WEB3 LOGGING
            'handlers': ['web3_file', 'console'],
            'level': 'INFO',
            'propagate': True,
        },
        'celery': {
            'handlers': ['celery_file', 'console'],
            'level': 'INFO',
            'propagate': True,
        },
        'celery.task': {
            'handlers': ['celery_file'],
            'level': 'INFO',
            'propagate': False,
        },
        # Keep your existing allauth debug logging
        'allauth': {
            'handlers': ['debug_file'],
            'level': 'DEBUG',
            'propagate': False,
        },
    },
}

# Security settings (enhanced for production readiness)
if not DEBUG:
    SECURE_BROWSER_XSS_FILTER = True
    SECURE_CONTENT_TYPE_NOSNIFF = True
    X_FRAME_OPTIONS = 'DENY'
    SECURE_HSTS_SECONDS = 31536000
    SECURE_HSTS_INCLUDE_SUBDOMAINS = True
    SECURE_HSTS_PRELOAD = True

    # HTTPS settings
    SECURE_SSL_REDIRECT = True
    SESSION_COOKIE_SECURE = True
    CSRF_COOKIE_SECURE = True
else:
    # Development settings
    SESSION_COOKIE_SECURE = False
    CSRF_COOKIE_SECURE = False

# Rate limiting settings
RATELIMIT_ENABLE = True
RATELIMIT_USE_CACHE = 'default'

# Security settings
SECURE_BROWSER_XSS_FILTER = True
SECURE_CONTENT_TYPE_NOSNIFF = True
X_FRAME_OPTIONS = 'DENY'

# Email configuration (for notifications)
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = os.environ.get('EMAIL_HOST', 'localhost')
EMAIL_PORT = int(os.environ.get('EMAIL_PORT', 587))
EMAIL_USE_TLS = True
EMAIL_HOST_USER = os.environ.get('EMAIL_HOST_USER', '')
EMAIL_HOST_PASSWORD = os.environ.get('EMAIL_HOST_PASSWORD', '')
DEFAULT_FROM_EMAIL = os.environ.get('DEFAULT_FROM_EMAIL', 'noreply@diaryvault.com')

# Custom User Model fields (if using extended user model)
AUTH_USER_MODEL = 'auth.User'  # Change to 'diary.User' if you have a custom user model

# Token rewards configuration
TOKEN_REWARDS = {
    'BASE_RATE_PER_WORD': 0.1,  # 1 token per 10 words
    'WALLET_BONUS': 5,  # Bonus for having wallet connected
    'DAILY_ENTRY_BONUS': 10,  # Bonus for daily streak
    'QUALITY_MULTIPLIER': {
        'short': 0.5,  # < 50 words
        'medium': 1.0,  # 50-200 words
        'long': 1.5,  # 200+ words
    }
}